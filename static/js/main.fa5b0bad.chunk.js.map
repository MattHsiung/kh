{"version":3,"sources":["components/DateSelector/bg.jpeg","components/DateSelector/index.tsx","components/Timeline/index.tsx","components/Node/index.tsx","components/ContentWindow/index.tsx","contentful/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","bg","Content","Label","label","Title","p","DateSelector","onStartDateChange","onEndDateChange","htmlFor","id","type","onChange","e","currentTarget","value","LineContainer","YearContainer","Year","Line","End","Timeline","startDate","endDate","children","DateTime","fromISO","year","NavLink","props","color","WorkNode","to","position","activeClassName","style","left","BorderStyle","css","BorderStyleInverse","TopBar","TopButton","button","ContentArea","Handle","DRAGGABLE_HANDLE","ContentWindow","onCloseClick","handle","height","width","className","aria-label","onClick","viewBox","xmlns","stroke","strokeWidth","x1","y1","x2","y2","client","contentful","space","accessToken","defaultStartDate","fromObject","toISODate","defaultEndDate","now","getPosition","targetDate","totalTime","diff","days","startToTarget","Math","floor","App","useState","setStartDate","setEndDate","entries","setEntries","useEffect","getEntries","then","catch","console","error","items","map","entry","fields","sys","date","path","render","history","match","find","params","workId","push","workTitle","title","documentToReactComponents","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa5b0bad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.1432983d.jpeg\";","import React, { FC } from \"react\";\nimport styled from \"styled-components/macro\";\nimport bg from \"./bg.jpeg\";\n\nconst Container = styled.div`\n  padding: 2rem;\n  height: 400px;\n  max-width: 500px;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: url(\"${bg}\") center no-repeat;\n  background-size: contain;\n  margin-left: auto;\n`;\n\nconst Content = styled.div``;\n\nconst Label = styled.label`\n  display: block;\n  font-weight: bold;\n  padding: 0.25rem;\n`;\n\nconst Title = styled.p`\n  font-size: 2rem;\n  margin: 0 0 1rem;\n`;\ntype Props = {\n  onStartDateChange: (dateString: string) => void;\n  onEndDateChange: (dateString: string) => void;\n};\nconst DateSelector: FC<Props> = ({ onStartDateChange, onEndDateChange }) => (\n  <Container>\n    <Content>\n      <Title>Date</Title>\n      <Label htmlFor=\"start-date\">Start</Label>\n      <input\n        id=\"start-date\"\n        type=\"date\"\n        onChange={(e) => onStartDateChange(e.currentTarget.value)}\n      />\n      <Label htmlFor=\"start-date\">End</Label>\n      <input\n        id=\"end-date\"\n        type=\"date\"\n        onChange={(e) => onEndDateChange(e.currentTarget.value)}\n      />\n    </Content>\n  </Container>\n);\n\nexport default DateSelector;\n","import { DateTime } from \"luxon\";\nimport React, {FC, ReactNode} from \"react\";\nimport styled from \"styled-components/macro\";\n\nconst Container = styled.div`\n  padding: 1rem;\n`;\n\nconst LineContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 0 4rem;\n`;\n\nconst YearContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Year = styled.p`\n  font-size: 4rem;\n  margin: 1rem 0 0;\n`;\n\nconst Line = styled.div`\n  border-bottom: 0.25rem solid black;\n  flex: 1;\n  position: relative;\n`;\n\nconst End = styled.div`\n  height: 80px;\n  border-left: 0.25rem solid black;\n`;\n\ntype Props = {\n  startDate: string;\n  endDate: string;\n  children?: ReactNode;\n};\nconst Timeline: FC<Props> = ({ startDate, endDate, children }) => (\n  <Container>\n    <LineContainer>\n      <End />\n      <Line>{children}</Line>\n      <End />\n    </LineContainer>\n    <YearContainer>\n      <Year>{DateTime.fromISO(startDate).year}</Year>\n      <Year>{DateTime.fromISO(endDate).year}</Year>\n    </YearContainer>\n  </Container>\n);\n\nexport default Timeline;\n","import React, {ComponentProps, FC} from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport styled from \"styled-components/macro\";\n\nconst Container = styled(NavLink)<{ color?: string }>`\n  background-color: ${props => props.color ?? 'white'};\n  width: 2rem;\n  height: 2rem;\n  border: 0.25rem solid black;\n  position: absolute;\n  border-radius: 50%;\n  margin-top: -1rem;\n  margin-left: -1rem;\n  &.active {\n    filter: brightness(50%);\n  }\n`;\n\ntype Props = {\n  color?: string;\n  to: ComponentProps<typeof NavLink>['to'];\n  position: number\n};\n\nconst WorkNode: FC<Props> = ({ color, to, position }) => <Container to={to} color={color} activeClassName='active'\n style={{ left: `${position}%`}}\n/>;\n\nexport default WorkNode;\n","import { FC, ReactNode, MouseEventHandler } from \"react\";\nimport styled, { css } from \"styled-components/macro\";\nimport { ResizableBox } from \"react-resizable\";\nimport \"react-resizable/css/styles.css\";\nimport Draggable from \"react-draggable\";\n\nconst BorderStyle = css`\n  border: 2px solid #fbfbfb;\n  border-right-color: black;\n  border-bottom-color: black;\n  background-color: #cccccc;\n`;\n\nconst BorderStyleInverse = css`\n  border: 2px solid #fbfbfb;\n  border-top-color: black;\n  border-left-color: black;\n  background-color: #cccccc;\n`;\n\nconst Container = styled.div`\n  ${BorderStyle};\n  padding: 4px 4px 8px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst TopBar = styled.div`\n  padding: 4px;\n  margin-bottom: 8px;\n  background: linear-gradient(to right, #043fb9, #6ca5c5);\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst TopButton = styled.button`\n  ${BorderStyle};\n  padding: 6px;\n  width: 2rem;\n  height: 2rem;\n`;\n\nconst ContentArea = styled.div`\n  ${BorderStyleInverse};\n  background-color: white;\n  flex: auto;\n  overflow-y: scroll;\n`;\n\nconst Handle = styled.div`\n    flex: 1;\n`;\n\ntype Props = {\n  children?: ReactNode;\n  onCloseClick: MouseEventHandler<HTMLButtonElement>;\n};\n\nlet DRAGGABLE_HANDLE = \"DRAGGABLE_HANDLE\";\nconst ContentWindow: FC<Props> = ({ children, onCloseClick }) => (\n  <Draggable handle={`.${DRAGGABLE_HANDLE}`}>\n    <ResizableBox height={500} width={500}>\n      <Container>\n        <TopBar>\n          <Handle className={DRAGGABLE_HANDLE} />\n          <TopButton aria-label=\"close\" onClick={onCloseClick}>\n            <svg\n              viewBox=\"0 0 100 100\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              stroke=\"black\"\n              strokeWidth=\"12px\"\n            >\n              <line x1=\"0\" y1=\"0\" x2=\"100\" y2=\"100\" />\n              <line x1=\"100\" y1=\"0\" x2=\"0\" y2=\"100\" />\n            </svg>\n          </TopButton>\n        </TopBar>\n        <ContentArea>{children}</ContentArea>\n      </Container>\n    </ResizableBox>\n  </Draggable>\n);\n\nexport default ContentWindow;\n","import * as contentful from \"contentful\";\nimport { Document } from \"@contentful/rich-text-types\";\n\nconst client = contentful.createClient({\n  space: \"c5y1xa88y6w9\",\n  accessToken: \"ruAbrUhSYsFQbOTdTZ2f06_qJRQ0R3Y1p_cYxwkCfas\",\n});\n\nexport default client;\n\nexport type ContentModel = {\n  date?: string;\n  title?: Document;\n  workTitle: string;\n};\n","import { EntryCollection } from \"contentful\";\nimport { DateTime } from \"luxon\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport DateSelector from \"./components/DateSelector\";\nimport Timeline from \"./components/Timeline\";\nimport WorkNode from \"./components/Node\";\nimport ContentWindow from \"./components/ContentWindow\";\nimport client, { ContentModel } from \"./contentful\";\nimport { documentToReactComponents } from \"@contentful/rich-text-react-renderer\";\nconst defaultStartDate = DateTime.fromObject({ year: 1993 }).toISODate();\nconst defaultEndDate = DateTime.now().toISODate();\n\nconst getPosition = (\n  startDate: string,\n  endDate: string,\n  targetDate: string\n) => {\n  const totalTime = DateTime.fromISO(startDate).diff(\n    DateTime.fromISO(endDate),\n    \"days\"\n  ).days;\n  const startToTarget = DateTime.fromISO(startDate).diff(\n    DateTime.fromISO(targetDate),\n    \"days\"\n  ).days;\n  return Math.floor((startToTarget / totalTime) * 100);\n};\n\nconst App = () => {\n  const [startDate, setStartDate] = useState(defaultStartDate);\n  const [endDate, setEndDate] = useState(defaultEndDate);\n  const [entries, setEntries] = useState<EntryCollection<ContentModel>>();\n  useEffect(() => {\n    client.getEntries<ContentModel>().then(setEntries).catch(console.error);\n  }, []);\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <DateSelector\n          onEndDateChange={setEndDate}\n          onStartDateChange={setStartDate}\n        />\n        <Timeline startDate={startDate} endDate={endDate}>\n          {entries?.items.map((entry) => {\n            if (entry?.fields) {\n              return (\n                <WorkNode\n                  to={`/work/${entry.sys.id}`}\n                  color=\"red\"\n                  position={getPosition(\n                    startDate,\n                    endDate,\n                    entry.fields.date ?? startDate\n                  )}\n                />\n              );\n            }\n            return null;\n          })}\n        </Timeline>\n        <Route\n          path=\"/work/:workId\"\n          render={({ history, match }) => {\n            const entry = entries?.items.find(\n              (entry) => entry.sys.id === match.params.workId\n            );\n            if (!entry) return null;\n            return (\n              <ContentWindow onCloseClick={() => history.push(\"/\")}>\n                <h1>{entry.fields.workTitle}</h1>\n                {entry.fields.title\n                  ? documentToReactComponents(entry.fields.title)\n                  : null}\n              </ContentWindow>\n            );\n          }}\n        />\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}